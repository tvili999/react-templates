<% 
const componentsDir = (args.components || "src/components");
const contextsDir = (args.contexts || "src/contexts");
const aliases = args.aliases || {
    "core": "src/core",
    "components": componentsDir,
    "contexts": contextsDir
}
-%>
---
to: webpack.config.js
overwrite: true
---
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCSSExtractPlugin = require("mini-css-extract-plugin");
const CircularDependencyPlugin = require('circular-dependency-plugin');

module.exports = env => ({
    mode: env.dev ? 'development' : 'production',
    entry: [
        'core-js/stable',
        "regenerator-runtime/runtime",
        './src/index.js'
    ],
    output: {
        path: path.join(__dirname, 'dist'),
        filename: env.dev ? '[name].js' : '[name].[contenthash].js',
        clean: true
    },
    resolve: {
        extensions: [".js", ".jsx"],
        modules: ["node_modules", "src"],
        alias: {
        <%_ for(let name in aliases) { -%>
            "<%=name %>": path.resolve(__dirname, "<%= aliases[name]%>"),
        <%_ } -%>
        }
    },
    devtool: env.dev ? "eval" : "source-map",
    devServer: {
        host: "0.0.0.0",
        contentBase: path.resolve(__dirname, "dist"),
        port: 8080
    },
    module: {
        rules: [
            {
                test: /\.jsx?$/,
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader',
                }
            },
            {
                test: /\.css$/,
                use: [
                    env.dev ? "style-loader" : MiniCSSExtractPlugin.loader,
                    {
                        loader: 'css-loader', 
                        options: {
                            importLoaders: 1,
                        }
                    },
                    "postcss-loader",
                ]
            },
            <%_ if(args.cssModules) { -%>
            {
                test: /\.styl$/,
                resourceQuery: { not: [/no-modules/] },
                use: [
                    env.dev ? "style-loader" : MiniCSSExtractPlugin.loader,
                    {
                        loader: 'css-loader', 
                        options: {
                            modules: true,
                            importLoaders: 1,
                        }
                    },
                    "postcss-loader",
                    'stylus-loader'
                ]
            },
            <%_ } -%>
            {
                test: /\.styl$/,
                <%_ if(args.cssModules) { -%>
                resourceQuery: /no-modules/,
                <%_ } -%>
                use: [
                    MiniCSSExtractPlugin.loader,
                    {
                        loader: 'css-loader',
                        options: {
                            importLoaders: 1,
                        }
                    },
                    "postcss-loader",
                    'stylus-loader'
                ]
            },
            {
                test: /\.(png|jpe?g|gif)$/,
                type: 'asset/resource'
            },
            {
                test: /\.svg$/,
                resourceQuery: { not: [ /raw/ ] },
                type: 'asset/resource'
            },
            {
                test: /\.svg$/,
                resourceQuery: /raw/,
                type: 'asset/source'
            },
            {
                test: /\.(woff|woff2|eot|ttf|otf)$/i,
                type: 'asset/resource',
            }
        ]
    },
    plugins: [
        new HtmlWebpackPlugin({
            template: './src/index.html'
        }),
        new MiniCSSExtractPlugin({ }),
        new CircularDependencyPlugin({
            exclude: /node_modules/,
            failOnError: true
        })
    ],
    optimization: {
        splitChunks: {
            chunks: "all"
        }
    }
});